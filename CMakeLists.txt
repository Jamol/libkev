
cmake_minimum_required(VERSION 2.8)
set(CMAKE_VERBOSE_MAKEFILE ON)

project(kev)

#set(CMAKE_DEBUG_POSTFIX "d")

set(PROJ_ROOT_DIR ${PROJECT_SOURCE_DIR})

set(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(ARCH_64 TRUE)
  set(PROCESSOR_ARCH "x64")
else()
  set(ARCH_64 FALSE)
  set(PROCESSOR_ARCH "x86")
endif()

include_directories(${PROJ_ROOT_DIR}/include)
include_directories(${PROJ_ROOT_DIR}/src)

file(GLOB SOURCE_FILES
  ${PROJ_ROOT_DIR}/src/*.cpp
  ${PROJ_ROOT_DIR}/src/util/*.cpp
  ${PROJ_ROOT_DIR}/src/poll/SelectPoll.cpp
  ${PROJ_ROOT_DIR}/src/poll/VPoll.cpp
  ${PROJ_ROOT_DIR}/src/poll/Notifier.cpp)

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    file(GLOB WINDOWS_SOURCES ${PROJ_ROOT_DIR}/src/poll/IocpPoll.cpp)
    set(SOURCE_FILES ${SOURCE_FILES} ${WINDOWS_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(CMAKE_MACOSX_RPATH 1)
    file(GLOB DARWIN_SOURCES ${PROJ_ROOT_DIR}/src/poll/KQueue.cpp)
    set(SOURCE_FILES ${SOURCE_FILES} ${DARWIN_SOURCES})
    if (CMAKE_TARGET_SYSTEM STREQUAL "ios")
    elseif (CMAKE_TARGET_SYSTEM STREQUAL "mac")
    endif ()
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    file(GLOB LINUX_SOURCES ${PROJ_ROOT_DIR}/src/poll/EPoll.cpp)
    set(SOURCE_FILES ${SOURCE_FILES} ${LINUX_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    file(GLOB ANDROID_SOURCES ${PROJ_ROOT_DIR}/src/poll/EPoll.cpp)
    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_SOURCES})
endif ()

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    #add_definitions(-DKUMA_EXPORTS)
    add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN)
    add_definitions(-D_WINDOWS -D_LIB)
    add_definitions(-D_UNICODE -DUNICODE)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    else()
        add_definitions(-DWIN32)
    endif()
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    add_definitions(-DLINUX)
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    add_definitions(-DANDROID)
endif ()

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    option(WIN_USE_MD "Use DLL-specific version of multithread runtime library (/MD)" OFF)
    #message(STATUS "++++++++ flags=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    if (WIN_USE_MD)
        message("Using DLL-specific version of multithread runtime library (/MD)")
        set(CMAKE_CXX_FLAGS_RELEASE "/MD /O2 -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
        set(CMAKE_CXX_FLAGS_DEBUG "/MDd /D_DEBUG /Zi /Ob0 /Od /RTC1 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MD /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
    else ()
        message("Using static version of multithread runtime library (/MT)")
        set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
        set(CMAKE_CXX_FLAGS_DEBUG "/MTd /D_DEBUG /Zi /Ob0 /Od /RTC1 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
    endif ()
    #message(STATUS "++++++++ flags2=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-arc -std=c++14 -stdlib=libc++ -fno-rtti")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden -Wnon-virtual-dtor -Woverloaded-virtual -fPIC")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fobjc-arc")
    if ((CMAKE_OSX_ARCHITECTURES STREQUAL "armv7") OR (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64"))
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fembed-bitcode")
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fembed-bitcode")
    endif ()
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -nostdinc++ -fvisibility-inlines-hidden")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wnon-virtual-dtor -Woverloaded-virtual -fexceptions")
endif ()

# ios target definition
if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    if (CMAKE_TARGET_SYSTEM STREQUAL "ios")
        set(IOS_DEPLOYMENT_TARGET "9.0")
        if ((CMAKE_OSX_ARCHITECTURES STREQUAL "armv7") OR (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64"))
            set(XCODE_IOS_PLATFORM "iphoneos")
        else ()
           set(XCODE_IOS_PLATFORM "iphonesimulator")
        endif ()
        set(XCODE_IOS_PLATFORM_VERSION_FLAG "-m${XCODE_IOS_PLATFORM}-version-min=${IOS_DEPLOYMENT_TARGET}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${XCODE_IOS_PLATFORM_VERSION_FLAG}")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${XCODE_IOS_PLATFORM_VERSION_FLAG}")
    elseif (CMAKE_TARGET_SYSTEM STREQUAL "mac")
        set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9")
    endif ()
endif ()

add_library(kev STATIC ${SOURCE_FILES})

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    target_compile_options(kev PRIVATE /W3 /WX)
else ()
    target_compile_options(kev PRIVATE -Werror)
endif ()


if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    if (ARCH_64)
        set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/windows/${PROCESSOR_ARCH}/${CMAKE_BUILD_TYPE}")
    else ()
        set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/windows/Win32/${CMAKE_BUILD_TYPE}")
    endif ()
    
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    if (CMAKE_TARGET_SYSTEM STREQUAL "ios")
        set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/ios/${CMAKE_BUILD_TYPE}-${XCODE_IOS_PLATFORM}")
    elseif (CMAKE_TARGET_SYSTEM STREQUAL "mac")
        set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/mac/${CMAKE_BUILD_TYPE}")
    endif ()
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/linux/${CMAKE_BUILD_TYPE}")
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/android/${CMAKE_ANDROID_ARCH_ABI}")
endif ()

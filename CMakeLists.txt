
cmake_minimum_required(VERSION 3.8)
set(CMAKE_VERBOSE_MAKEFILE ON)

project(kev)

#set(CMAKE_DEBUG_POSTFIX "d")

set(PROJ_ROOT_DIR ${PROJECT_SOURCE_DIR})

set(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(ARCH_64 TRUE)
  set(PROCESSOR_ARCH "x64")
else()
  set(ARCH_64 FALSE)
  set(PROCESSOR_ARCH "x86")
endif()

include_directories(${PROJ_ROOT_DIR}/include)
include_directories(${PROJ_ROOT_DIR}/src)

file(GLOB SOURCE_FILES
  ${PROJ_ROOT_DIR}/src/*.cpp
  ${PROJ_ROOT_DIR}/src/utils/*.cpp
  ${PROJ_ROOT_DIR}/src/poll/SelectPoll.cpp
  ${PROJ_ROOT_DIR}/src/poll/VPoll.cpp
  ${PROJ_ROOT_DIR}/src/poll/CVPoll.cpp
  ${PROJ_ROOT_DIR}/src/poll/Notifier.cpp)

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
  file(GLOB WINDOWS_SOURCES ${PROJ_ROOT_DIR}/src/poll/IocpPoll.cpp)
  set(SOURCE_FILES ${SOURCE_FILES} ${WINDOWS_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
  set(CMAKE_MACOSX_RPATH 1)
  file(GLOB DARWIN_SOURCES ${PROJ_ROOT_DIR}/src/poll/KQueue.cpp
                           ${PROJ_ROOT_DIR}/src/poll/RunLoop.mm)
  set(SOURCE_FILES ${SOURCE_FILES} ${DARWIN_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
  file(GLOB ANDROID_SOURCES ${PROJ_ROOT_DIR}/src/poll/EPoll.cpp)
  set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
  file(GLOB LINUX_SOURCES ${PROJ_ROOT_DIR}/src/poll/EPoll.cpp
                          ${PROJ_ROOT_DIR}/src/poll/IOUring.cpp)
  set(SOURCE_FILES ${SOURCE_FILES} ${LINUX_SOURCES})
elseif (CMAKE_SYSTEM_NAME MATCHES "OHOS")
  file(GLOB OHOS_SOURCES ${PROJ_ROOT_DIR}/src/poll/EPoll.cpp)
  set(SOURCE_FILES ${SOURCE_FILES} ${OHOS_SOURCES})
endif ()

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
  #add_definitions(-DKEV_EXPORTS)
  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN)
  add_definitions(-D_WINDOWS -D_LIB)
  add_definitions(-D_UNICODE -DUNICODE)
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  else()
    add_definitions(-DWIN32)
  endif()
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
  add_definitions(-DKEV_HAS_RUNLOOP)
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
  add_definitions(-DANDROID -DLINUX)
  if (KEV_HAS_IOURING)
    add_definitions(-DKEV_HAS_IOURING)
    message(STATUS "android has io_uring")
  endif()
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
  add_definitions(-DLINUX)
  
  #execute_process(COMMAND uname -r OUTPUT_VARIABLE LINUX_KERNEL_VERSION)
  #message(STATUS "kernel version: ${LINUX_KERNEL_VERSION}")

  cmake_host_system_information(RESULT OS_RELEASE_VERSION QUERY OS_RELEASE)
  message(STATUS "OS release version: ${OS_RELEASE_VERSION}")
  
  if (KEV_HAS_IOURING)
    add_definitions(-DKEV_HAS_IOURING)
    message(STATUS "linux has io_uring")
  endif()
endif ()

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
  option(WIN_USE_MD "Use DLL-specific version of multithread runtime library (/MD)" OFF)
  #message(STATUS "++++++++ flags=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  if (WIN_USE_MD)
    message("Using DLL-specific version of multithread runtime library (/MD)")
    set(CMAKE_CXX_FLAGS_RELEASE "/MD /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
    set(CMAKE_CXX_FLAGS_DEBUG "/MDd /D_DEBUG /Zi /Ob0 /Od /RTC1 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MD /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
  else ()
    message("Using static version of multithread runtime library (/MT)")
    set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd /D_DEBUG /Zi /Ob0 /Od /RTC1 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /O2 /Zi -DNDEBUG -DNVALGRIND -DDYNAMIC_ANNOTATIONS_ENABLED=0")
  endif ()
  #message(STATUS "++++++++ flags2=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-arc -std=c++14 -stdlib=libc++")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden -Wnon-virtual-dtor -Woverloaded-virtual -fPIC")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fobjc-arc")
  if ((CMAKE_BUILD_TYPE STREQUAL "Debug") OR (CMAKE_BUILD_TYPE STREQUAL "debug"))
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_DEBUG -g -O0")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DEBUG -g -O0")
  elseif (CMAKE_GENERATOR STREQUAL "Xcode")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -D_DEBUG")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} -D_DEBUG")
  endif ()
    if ((CMAKE_OSX_ARCHITECTURES STREQUAL "armv7") OR (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64"))
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fembed-bitcode")
      set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fembed-bitcode")
  endif ()
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fvisibility-inlines-hidden")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wnon-virtual-dtor -Woverloaded-virtual -fexceptions")
elseif (CMAKE_SYSTEM_NAME MATCHES "OHOS")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fPIC -Wno-unused-command-line-argument")
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fPIC -m64 -march=x86-64")
endif ()

# ios target definition
if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
  if (CMAKE_GENERATOR STREQUAL "Xcode")
    # Architectures
    if(CMAKE_TARGET_SYSTEM STREQUAL "ios")
      set(CMAKE_XCODE_ATTRIBUTE_SDKROOT iphoneos)
      set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET 9.0)
      set(CMAKE_XCODE_ATTRIBUTE_ARCHS "$(ARCHS_STANDARD)")
      set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphonesimulator*] x86_64)
    else ()
      set(CMAKE_XCODE_ATTRIBUTE_SDKROOT macosx)
      set(CMAKE_XCODE_ATTRIBUTE_MACOSX_DEPLOYMENT_TARGET 10.9)
    endif ()
    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH NO)
  elseif (CMAKE_TARGET_SYSTEM STREQUAL "ios")
    set(IOS_DEPLOYMENT_TARGET "11.0")
    set(XCODE_IOS_PLATFORM_VERSION_FLAG "-m${XCODE_IOS_PLATFORM}-version-min=${IOS_DEPLOYMENT_TARGET}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${XCODE_IOS_PLATFORM_VERSION_FLAG}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${XCODE_IOS_PLATFORM_VERSION_FLAG}")
  elseif (CMAKE_TARGET_SYSTEM STREQUAL "mac")
    set(CMAKE_OSX_DEPLOYMENT_TARGET "10.13")
    elseif (CMAKE_TARGET_SYSTEM STREQUAL "visionos")
  endif ()
endif ()

if (KEV_ENABLE_ASAN)
  add_compile_options(
    $<$<CONFIG:DEBUG>:-fsanitize=address,undefined>
    $<$<CONFIG:DEBUG>:-fsanitize-recover=all>
    $<$<CONFIG:DEBUG>:-fno-omit-frame-pointer>
    $<$<CONFIG:DEBUG>:-fno-optimize-sibling-calls>
    $<$<CONFIG:DEBUG>:-fno-var-tracking>
    $<$<CONFIG:DEBUG>:-fno-stack-protector>)
  message("Address Sanitizer enabled")
endif()

add_library(kev STATIC ${SOURCE_FILES})

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
  target_compile_options(kev PRIVATE /W3 /WX)
else ()
  target_compile_options(kev PRIVATE -Werror)
endif ()


if (CMAKE_SYSTEM_NAME MATCHES "Windows")
  if (ARCH_64)
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/windows/${PROCESSOR_ARCH}/${CMAKE_BUILD_TYPE}")
  else ()
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/windows/Win32/${CMAKE_BUILD_TYPE}")
  endif ()
    
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
  if (CMAKE_TARGET_SYSTEM STREQUAL "ios")
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/ios/${CMAKE_BUILD_TYPE}-${XCODE_IOS_PLATFORM}")
  elseif (CMAKE_TARGET_SYSTEM STREQUAL "mac")
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/mac/${CMAKE_BUILD_TYPE}")
  elseif (CMAKE_TARGET_SYSTEM STREQUAL "visionos")
    set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/visionos/${CMAKE_BUILD_TYPE}-${XCODE_IOS_PLATFORM}")
  endif ()
  # xcode project attributes
  if (CMAKE_GENERATOR STREQUAL "Xcode")
    target_compile_options(kev PRIVATE $<$<CONFIG:Debug>:-g -O0>)
    target_compile_options(kev PRIVATE $<$<CONFIG:Release>:-g -Os>)
  endif()
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
  if (NOT DEFINED CMAKE_SYSTEM_PROCESS OR CMAKE_SYSTEM_PROCESS STREQUAL "")
    set(CMAKE_SYSTEM_PROCESS ${CMAKE_HOST_SYSTEM_PROCESSOR})
  endif ()
  if (CMAKE_SYSTEM_PROCESS STREQUAL "aarch64" )
    set(CMAKE_SYSTEM_PROCESS "arm64")
  endif ()
  
  message("CMAKE_SYSTEM_PROCESS=${CMAKE_SYSTEM_PROCESS}")
  set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/linux/${CMAKE_SYSTEM_PROCESS}/${CMAKE_BUILD_TYPE}")
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
  set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/android/${CMAKE_ANDROID_ARCH_ABI}")
elseif (CMAKE_SYSTEM_NAME MATCHES "OHOS")
  set(LIBRARY_OUTPUT_PATH "${PROJ_ROOT_DIR}/lib/ohos/${CMAKE_ANDROID_ARCH_ABI}/${CMAKE_BUILD_TYPE}")
endif ()
